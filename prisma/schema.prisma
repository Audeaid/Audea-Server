generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url = env("DATABASE_URL")
}

model User {
    id                      String                      @id @default(auto()) @map("_id") @db.ObjectId
    clerkUserId             String                      @unique
    firstName               String         
    lastName                String
    email                   String                      @unique
    createdAt               DateTime
    notionPageId            String?
    subscription            Subscription?
    content                 Content[]
    contentSettings         ContentSettings?
    notionAccount           NotionAccount?
    darkModePreferences     DarkModePreferences?
    iOSVote                 IOSVote?
    androidVote             AndroidVote?
    androidTableVote        AndroidTabletVote?
    macOSVote               MacOSVote?
    windowsVote             WindowsVote?
    linuxVote               LinuxVote?
    iPadOSVote              IPadOSVote?
}

model DeletedAccount {
    id                  String          @id @default(auto()) @map("_id") @db.ObjectId
    email               String          @unique
}

model Subscription {
    id                  String              @id @default(auto()) @map("_id") @db.ObjectId
    type                SubscriptionType
    createdAt           DateTime
    startDate           DateTime
    endDate             DateTime
    user                User?               @relation(fields: [userId], references: [id])
    userId              String              @unique @db.ObjectId
    extended            Boolean
    clerkUserId         String              @unique
}

enum SubscriptionType {
    TRIAL
    MONTHLY
    LIFETIME
    YEARLY
    EARLYADOPTER
}

model DarkModePreferences {
    id                  String              @id @default(auto()) @map("_id") @db.ObjectId
    darkMode            Boolean
    user                User?               @relation(fields: [userId], references: [id])
    userId              String              @unique @db.ObjectId
    clerkUserId         String              @unique
}

model IOSVote {
    id                  String              @id @default(auto()) @map("_id") @db.ObjectId
    user                User?               @relation(fields: [userId], references: [id])
    userId              String              @unique @db.ObjectId
    clerkUserId         String              @unique
}

model AndroidVote {
    id                  String              @id @default(auto()) @map("_id") @db.ObjectId
    user                User?               @relation(fields: [userId], references: [id])
    userId              String              @unique @db.ObjectId
    clerkUserId         String              @unique
}

model AndroidTabletVote {
    id                  String              @id @default(auto()) @map("_id") @db.ObjectId
    user                User?               @relation(fields: [userId], references: [id])
    userId              String              @unique @db.ObjectId
    clerkUserId         String              @unique
}

model MacOSVote {
    id                  String              @id @default(auto()) @map("_id") @db.ObjectId
    user                User?               @relation(fields: [userId], references: [id])
    userId              String              @unique @db.ObjectId
    clerkUserId         String              @unique
}

model WindowsVote {
    id                  String              @id @default(auto()) @map("_id") @db.ObjectId
    user                User?               @relation(fields: [userId], references: [id])
    userId              String              @unique @db.ObjectId
    clerkUserId         String              @unique
}

model LinuxVote {
    id                  String              @id @default(auto()) @map("_id") @db.ObjectId
    user                User?               @relation(fields: [userId], references: [id])
    userId              String              @unique @db.ObjectId
    clerkUserId         String              @unique
}

model IPadOSVote {
    id                  String              @id @default(auto()) @map("_id") @db.ObjectId
    user                User?               @relation(fields: [userId], references: [id])
    userId              String              @unique @db.ObjectId
    clerkUserId         String              @unique
}

model TypeOfPrompt {
    id                  String              @id @default(auto()) @map("_id") @db.ObjectId
    displayName         String
    systemPrompt        String
    createdAt           DateTime
    content             Content[]
    contentSettings     ContentSettings[]
}

model Content {
    id                      String                  @id @default(auto()) @map("_id") @db.ObjectId
    createdAt               DateTime
    title                   String?
    voiceNoteUrl            String?
    transcript              String?
    gptGenerated            String?
    typeOfPrompt            TypeOfPrompt?           @relation(fields: [typeOfPromptId], references: [id])
    typeOfPromptId          String?                 @db.ObjectId
    user                    User                    @relation(fields: [userId], references: [id])
    userId                  String                  @db.ObjectId
    writingStyle            String?
    outputLanguage          OutputLanguage?
    generatedNotionPage     GeneratedNotionPage?
}

model ContentSettings {
    id                      String              @id @default(auto()) @map("_id") @db.ObjectId
    createdAt               DateTime
    lastUpdate              DateTime
    user                    User                @relation(fields: [userId], references: [id])
    userId                  String              @unique @db.ObjectId
    writingStyle            String
    outputLanguage          OutputLanguage
    typeOfPrompt            TypeOfPrompt        @relation(fields: [typeOfPromptId], references: [id])
    typeOfPromptId          String              @db.ObjectId
}

enum OutputLanguage {
    TRANSCRIPT
    ENGLISH
    BAHASAINDONESIA
    CHINESE
    HINDI
    JAPANESE
    SPANISH
    FRENCH
    RUSSIAN
    URDU
    ARABIC
    ASK
}

model NotionAccount {
    id                      String                  @id @default(auto()) @map("_id") @db.ObjectId
    createdAt               DateTime
    accessToken             String                  @unique
    workspaceName           String
    workspaceIcon           String
    workspaceId             String
    ownerUserId             String
    databaseId              String
    user                    User                    @relation(fields: [userId], references: [id])
    userId                  String                  @db.ObjectId @unique
    generatedNotionPage     GeneratedNotionPage[]
}

model GeneratedNotionPage {
    id                      String              @id @default(auto()) @map("_id") @db.ObjectId
    notionPageId            String              @unique
    url                     String
    content                 Content             @relation(fields: [contentId], references: [id])
    contentId               String              @unique @db.ObjectId
    notionAccount           NotionAccount       @relation(fields: [notionAccountId], references: [id])
    notionAccountId         String              @db.ObjectId
}